{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { words } from \"./words\";\nimport Row from \"./src/components/Row\";\nimport react from \"react\";\nimport Modal from \"react-native-modal\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this);\n    _this.state = {\n      targetWord: words[Math.floor(Math.random() * words.length)].toUpperCase(),\n      guess: [\"     \", \"     \", \"     \", \"     \", \"     \", \"     \"],\n      cnt: 0,\n      text: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"clearFunc\",\n    value: function clearFunc(e) {\n      this.setState({\n        text: \"\"\n      });\n    }\n  }, {\n    key: \"newGame\",\n    value: function newGame() {\n      this.setState({\n        targetWord: words[Math.floor(Math.random() * words.length)].toUpperCase(),\n        guess: [\"     \", \"     \", \"     \", \"     \", \"     \", \"     \"],\n        cnt: 0,\n        text: \"\"\n      });\n    }\n  }, {\n    key: \"pressHandler\",\n    value: function pressHandler() {\n      if (this.state.text.length === 5 && this.state.cnt < 6) {\n        if (this.state.text.toLowerCase() === this.state.targetWord.toLowerCase()) {\n          alert(\"Congratulations !!!\\n You have guessed the word correctly.\");\n        } else if (this.state.cnt >= 5) {\n          alert(\"Sorry, you've lost.\\n Answer: \" + this.state.targetWord);\n        }\n\n        var ind = this.state.cnt;\n        var temp = this.state.guess.map(function (i) {\n          return i;\n        });\n        temp[ind] = this.state.text;\n        this.setState({\n          guess: temp\n        });\n        this.setState({\n          cnt: this.state.cnt + 1\n        });\n      } else if (this.state.cnt >= 5) {\n        alert(\"Sorry, you've lost.\\n Answer: \" + this.state.targetWord);\n        this.newGame();\n      } else if (this.state.text < 5) {\n        alert(\"please enter a 5 letter word\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _jsx(View, {\n        style: styles.container,\n        children: _jsxs(ScrollView, {\n          contentContainerStyle: {\n            justifyContent: \"flex-start\",\n            alignItems: \"center\",\n            flexGrow: 1,\n            position: \"relative\",\n            top: 20\n          },\n          children: [_jsx(Text, {\n            style: {\n              fontSize: 50,\n              position: \"relative\",\n              margin: 20\n            },\n            children: \"WORDLE\"\n          }), _jsxs(View, {\n            style: {\n              position: \"relative\",\n              top: 0,\n              justifyContent: \"center\",\n              alignContent: \"center\",\n              alignItems: \"center\"\n            },\n            children: [_jsx(Row, {\n              target: this.state.targetWord,\n              row: this.state.guess[0]\n            }), _jsx(Row, {\n              target: this.state.targetWord,\n              row: this.state.guess[1]\n            }), _jsx(Row, {\n              target: this.state.targetWord,\n              row: this.state.guess[2]\n            }), _jsx(Row, {\n              target: this.state.targetWord,\n              row: this.state.guess[3]\n            }), _jsx(Row, {\n              target: this.state.targetWord,\n              row: this.state.guess[4]\n            }), _jsx(Row, {\n              target: this.state.targetWord,\n              row: this.state.guess[5]\n            })]\n          }), _jsx(TextInput, {\n            placeholder: \"input word\",\n            style: {\n              position: \"relative\",\n              top: -5,\n              height: 70,\n              width: \"60%\",\n              marginTop: 20,\n              backgroundColor: \"#eef6f5\",\n              textAlignVertical: \"center\",\n              textAlign: \"center\",\n              fontSize: 20,\n              borderRadius: 40,\n              borderWidth: 0.2\n            },\n            maxLength: 5,\n            value: this.state.text,\n            onChangeText: function onChangeText(text) {\n              return _this2.setState({\n                text: text\n              });\n            }\n          }), _jsx(TouchableOpacity, {\n            children: _jsx(Text, {\n              style: {\n                height: 60,\n                width: 130,\n                backgroundColor: \"#deede9\",\n                textAlign: \"center\",\n                textAlignVertical: \"center\",\n                position: \"relative\",\n                top: 30,\n                borderRadius: 50,\n                fontSize: 15,\n                marginBottom: 50\n              },\n              onPress: function onPress(e) {\n                _this2.pressHandler(), _this2.clearFunc(e);\n              },\n              children: \"ENTER\"\n            })\n          }), _jsx(TouchableOpacity, {\n            style: {\n              height: 70,\n              width: 70,\n              position: \"absolute\",\n              bottom: 50,\n              left: 10,\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              alignContent: \"center\",\n              borderRadius: 30\n            },\n            onPress: function onPress() {\n              return _this2.newGame();\n            },\n            children: _jsx(Ionicons, {\n              name: \"md-reload-circle\",\n              size: 65,\n              color: \"#add2c8\"\n            })\n          })]\n        })\n      });\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flexGrow: 1,\n    backgroundColor: \"green\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    backgroundColor: \"#FAEDF0\"\n  }\n});\nexport default App;","map":{"version":3,"sources":["G:/Temp/wordle_2.0/App.js"],"names":["React","words","Row","react","Modal","Ionicons","App","state","targetWord","Math","floor","random","length","toUpperCase","guess","cnt","text","e","setState","toLowerCase","alert","ind","temp","map","i","newGame","styles","container","justifyContent","alignItems","flexGrow","position","top","fontSize","margin","alignContent","height","width","marginTop","backgroundColor","textAlignVertical","textAlign","borderRadius","borderWidth","marginBottom","pressHandler","clearFunc","bottom","left","Component","StyleSheet","create"],"mappings":"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","sourcesContent":["// import { StatusBar } from \"expo-status-bar\";\r\nimport React from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  StatusBar,\r\n  TextInput,\r\n  Button,\r\n  TouchableOpacity,\r\n  ToastAndroid,\r\n  ScrollView,\r\n} from \"react-native\";\r\nimport { words } from \"./words\";\r\nimport Row from \"./src/components/Row\";\r\nimport react from \"react\";\r\nimport Modal from \"react-native-modal\";\r\n\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\n// import { TextInput } from \"react-native-web\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      targetWord: words[Math.floor(Math.random() * words.length)].toUpperCase(),\r\n      guess: [\"     \", \"     \", \"     \", \"     \", \"     \", \"     \"],\r\n      cnt: 0,\r\n      text: \"\",\r\n    };\r\n  }\r\n\r\n  clearFunc(e) {\r\n    this.setState({ text: \"\" });\r\n  }\r\n\r\n  newGame() {\r\n    this.setState({\r\n      targetWord: words[Math.floor(Math.random() * words.length)].toUpperCase(),\r\n      guess: [\"     \", \"     \", \"     \", \"     \", \"     \", \"     \"],\r\n      cnt: 0,\r\n      text: \"\",\r\n    });\r\n    // this.setState({});\r\n    // this.setState({});\r\n    // this.setState({});\r\n  }\r\n\r\n  // handleClick(e) {\r\n  //   let test = this.input;\r\n  //   const text = test._lastNativeText.trim();\r\n  //   this.props.onAddClick(text);\r\n\r\n  // }\r\n\r\n  pressHandler() {\r\n    // console.log(\"button pressed\");\r\n    // console.log(this.state.text);\r\n    if (this.state.text.length === 5 && this.state.cnt < 6) {\r\n      if (\r\n        this.state.text.toLowerCase() === this.state.targetWord.toLowerCase()\r\n      ) {\r\n        alert(\"Congratulations !!!\\n You have guessed the word correctly.\");\r\n        // this.newGame();\r\n      } else if (this.state.cnt >= 5) {\r\n        alert(\"Sorry, you've lost.\\n Answer: \" + this.state.targetWord);\r\n        // this.newGame();\r\n        // alert(\"please enter a 5 letter word\");\r\n      }\r\n      var ind = this.state.cnt;\r\n      var temp = this.state.guess.map((i) => i);\r\n      // console.log(temp);\r\n      temp[ind] = this.state.text;\r\n      this.setState({ guess: temp });\r\n      this.setState({ cnt: this.state.cnt + 1 });\r\n      // console.log(this.state.guess);\r\n\r\n      // this.setState({ text: \"\" });\r\n      // console.log(\"inside if\");\r\n    } else if (this.state.cnt >= 5) {\r\n      alert(\"Sorry, you've lost.\\n Answer: \" + this.state.targetWord);\r\n      this.newGame();\r\n      // alert(\"please enter a 5 letter word\");\r\n    } else if (this.state.text < 5) {\r\n      alert(\"please enter a 5 letter word\");\r\n    }\r\n\r\n    // this.setState({cnt: cnt+1})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View style={styles.container}>\r\n        <ScrollView\r\n          contentContainerStyle={{\r\n            justifyContent: \"flex-start\",\r\n            alignItems: \"center\",\r\n            // backgroundColor: \"blue\",\r\n            // width: \"100%\",\r\n            // height: \"100%\",\r\n            flexGrow: 1,\r\n            position: \"relative\",\r\n            top: 20,\r\n          }}\r\n        >\r\n          <Text\r\n            style={{\r\n              fontSize: 50,\r\n              position: \"relative\",\r\n              margin: 20,\r\n              // top: StatusBar.currentHeight + 10,\r\n            }}\r\n          >\r\n            WORDLE\r\n          </Text>\r\n          <View\r\n            style={{\r\n              position: \"relative\",\r\n              top: 0,\r\n              justifyContent: \"center\",\r\n              alignContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Row target={this.state.targetWord} row={this.state.guess[0]}></Row>\r\n            <Row target={this.state.targetWord} row={this.state.guess[1]}></Row>\r\n            <Row target={this.state.targetWord} row={this.state.guess[2]}></Row>\r\n            <Row target={this.state.targetWord} row={this.state.guess[3]}></Row>\r\n            <Row target={this.state.targetWord} row={this.state.guess[4]}></Row>\r\n            <Row target={this.state.targetWord} row={this.state.guess[5]}></Row>\r\n          </View>\r\n          <TextInput\r\n            placeholder=\"input word\"\r\n            style={{\r\n              position: \"relative\",\r\n              top: -5,\r\n              height: 70,\r\n              width: \"60%\",\r\n              marginTop: 20,\r\n              backgroundColor: \"#eef6f5\",\r\n              textAlignVertical: \"center\",\r\n              textAlign: \"center\",\r\n              fontSize: 20,\r\n              borderRadius: 40,\r\n              borderWidth: 0.2,\r\n            }}\r\n            maxLength={5}\r\n            value={this.state.text}\r\n            onChangeText={(text) => this.setState({ text })}\r\n          ></TextInput>\r\n          <TouchableOpacity>\r\n            <Text\r\n              style={{\r\n                height: 60,\r\n                width: 130,\r\n                backgroundColor: \"#deede9\",\r\n                textAlign: \"center\",\r\n                textAlignVertical: \"center\",\r\n                position: \"relative\",\r\n                top: 30,\r\n                borderRadius: 50,\r\n                fontSize: 15,\r\n                marginBottom: 50,\r\n              }}\r\n              onPress={(e) => {\r\n                this.pressHandler(), this.clearFunc(e);\r\n              }}\r\n            >\r\n              ENTER\r\n            </Text>\r\n          </TouchableOpacity>\r\n          <TouchableOpacity\r\n            style={{\r\n              height: 70,\r\n              width: 70,\r\n              // backgroundColor: \"#c4eee8\",\r\n              position: \"absolute\",\r\n              bottom: 50,\r\n              left: 10,\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              alignContent: \"center\",\r\n              borderRadius: 30,\r\n              // padding: 1,\r\n              // borderWidth: 0.2,\r\n            }}\r\n            onPress={() => this.newGame()}\r\n          >\r\n            {/* <Ionicons\r\n              name=\"md-refresh-circle-outline\"\r\n              size={50}\r\n              color=\"#11468F\"\r\n              // style={{ margin: 5 }}\r\n            /> */}\r\n            <Ionicons name=\"md-reload-circle\" size={65} color=\"#add2c8\" />\r\n          </TouchableOpacity>\r\n          {/* <TouchableOpacity\r\n            style={{\r\n              height: 70,\r\n              width: 70,\r\n              // backgroundColor: \"#c4eee8\",\r\n              position: \"absolute\",\r\n              bottom: 50,\r\n              right: 10,\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              alignContent: \"center\",\r\n              borderRadius: 30,\r\n              // padding: 1,\r\n              // borderWidth: 0.2,\r\n            }}\r\n            onPress={() => null}\r\n          >\r\n            <Ionicons name=\"information-circle\" size={65} color=\"#add2c8\" />\r\n          </TouchableOpacity> */}\r\n        </ScrollView>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flexGrow: 1,\r\n    backgroundColor: \"green\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-start\",\r\n    backgroundColor: \"#FAEDF0\",\r\n  },\r\n});\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}