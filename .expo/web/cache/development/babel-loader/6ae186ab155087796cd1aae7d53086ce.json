{"ast":null,"code":"import React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { backgroundColor, color } from \"react-native/Libraries/Components/View/ReactNativeStyleAttributes\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Row = function Row(_ref) {\n  var target = _ref.target,\n      row = _ref.row;\n  target = target.toUpperCase();\n  row = row.toUpperCase();\n  console.log(target);\n  var rowView = [];\n  var charCount = {};\n\n  for (var i = 0; i < target.length; i++) {\n    if (charCount.hasOwnProperty(target[i])) {\n      charCount[target[i]] += 1;\n    } else {\n      charCount[target[i]] = 1;\n    }\n\n    if (row[i] === target[i]) {\n      charCount[target[i]] -= 1;\n    }\n  }\n\n  for (var _i = 0; _i < target.length; _i++) {\n    if (row[_i] === target[_i]) {\n      charCount[target[_i]] -= 1;\n      rowView.push(_jsx(Text, {\n        style: styles.txtGreen,\n        children: row[_i]\n      }, _i));\n    } else if (target.includes(row[_i])) {\n      if (charCount[row[_i]] >= 1) {\n        charCount[row[_i]] -= 1;\n        rowView.push(_jsx(Text, {\n          style: styles.txtYellow,\n          children: row[_i]\n        }, _i));\n      } else {\n        rowView.push(_jsx(Text, {\n          style: styles.txtGray,\n          children: row[_i]\n        }, _i));\n      }\n    } else {\n      rowView.push(_jsx(Text, {\n        style: styles.txtGray,\n        children: row[_i]\n      }, _i));\n    }\n  }\n\n  return _jsx(View, {\n    style: {\n      flexDirection: \"row\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      marginBottom: 10\n    },\n    children: rowView\n  });\n};\n\nvar styles = StyleSheet.create({\n  txtGray: {\n    height: 65,\n    width: 65,\n    fontSize: 55,\n    backgroundColor: \"gray\",\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    color: \"white\",\n    textAlignVertical: \"center\",\n    margin: 1.5\n  },\n  txtGreen: {\n    height: 65,\n    width: 65,\n    fontSize: 55,\n    backgroundColor: \"#95CD41\",\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    color: \"white\",\n    textAlignVertical: \"center\",\n    margin: 1.5\n  },\n  txtYellow: {\n    height: 65,\n    width: 65,\n    fontSize: 55,\n    backgroundColor: \"#F6D860\",\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    color: \"white\",\n    textAlignVertical: \"center\",\n    margin: 1.5\n  }\n});\nexport default Row;","map":{"version":3,"sources":["G:/Temp/wordle_2.0/src/components/Row.js"],"names":["React","backgroundColor","color","Row","target","row","toUpperCase","console","log","rowView","charCount","i","length","hasOwnProperty","push","styles","txtGreen","includes","txtYellow","txtGray","flexDirection","justifyContent","alignItems","marginBottom","StyleSheet","create","height","width","fontSize","textAlign","fontWeight","textAlignVertical","margin"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { StyleSheet, Text, View, StatusBar } from \"react-native\";\r\nimport {\r\n  backgroundColor,\r\n  color,\r\n} from \"react-native/Libraries/Components/View/ReactNativeStyleAttributes\";\r\n\r\nconst Row = ({ target, row }) => {\r\n  //   const { target, row } = props;\r\n  target = target.toUpperCase();\r\n  row = row.toUpperCase();\r\n  //   console.log(\"props\");\r\n  console.log(target);\r\n  //   console.log(row);\r\n  //   console.log(\"###################\");\r\n  let rowView = [];\r\n  var charCount = {};\r\n  for (let i = 0; i < target.length; i++) {\r\n    if (charCount.hasOwnProperty(target[i])) {\r\n      charCount[target[i]] += 1;\r\n    } else {\r\n      charCount[target[i]] = 1;\r\n    }\r\n\r\n    if (row[i] === target[i]) {\r\n      charCount[target[i]] -= 1;\r\n    }\r\n  }\r\n  //   console.log(charCount);\r\n  for (let i = 0; i < target.length; i++) {\r\n    // console.log(row[i]);\r\n    if (row[i] === target[i]) {\r\n      charCount[target[i]] -= 1;\r\n      rowView.push(\r\n        <Text style={styles.txtGreen} key={i}>\r\n          {row[i]}\r\n        </Text>\r\n      );\r\n    } else if (target.includes(row[i])) {\r\n      if (charCount[row[i]] >= 1) {\r\n        charCount[row[i]] -= 1;\r\n        rowView.push(\r\n          <Text style={styles.txtYellow} key={i}>\r\n            {row[i]}\r\n          </Text>\r\n        );\r\n      } else {\r\n        rowView.push(\r\n          <Text style={styles.txtGray} key={i}>\r\n            {row[i]}\r\n          </Text>\r\n        );\r\n      }\r\n    } else {\r\n      rowView.push(\r\n        <Text style={styles.txtGray} key={i}>\r\n          {row[i]}\r\n        </Text>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        // height: 80,\r\n        // width: \"90%\",\r\n        // backgroundColor: \"green\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"center\",\r\n        // alignContent: \"center\",\r\n        alignItems: \"center\",\r\n        // marginTop: 5,\r\n        marginBottom: 10,\r\n        // paddingLeft: 5,\r\n        // paddingRight: 5,\r\n      }}\r\n    >\r\n      {/* <Text style={styles.txtGray}>C</Text>\r\n      <Text style={styles.txtGreen}>H</Text>\r\n      <Text style={styles.txtYellow}>A</Text>\r\n      <Text style={styles.txtGray}>I</Text>\r\n      <Text style={styles.txtGray}>N</Text> */}\r\n      {rowView}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  txtGray: {\r\n    height: 65,\r\n    width: 65,\r\n    fontSize: 55,\r\n    backgroundColor: \"gray\",\r\n    // borderWidth: 0.9,\r\n    // alignItems: \"center\",\r\n    // justifyContent: \"center\",\r\n    // alignContent: \"center\",\r\n    textAlign: \"center\",\r\n    fontWeight: \"bold\",\r\n    color: \"white\",\r\n    textAlignVertical: \"center\",\r\n    margin: 1.5,\r\n  },\r\n  txtGreen: {\r\n    height: 65,\r\n    width: 65,\r\n    fontSize: 55,\r\n    backgroundColor: \"#95CD41\",\r\n    // borderWidth: 0.9,\r\n    // alignItems: \"center\",\r\n    // justifyContent: \"center\",\r\n    // alignContent: \"center\",\r\n    textAlign: \"center\",\r\n    fontWeight: \"bold\",\r\n    color: \"white\",\r\n    textAlignVertical: \"center\",\r\n    margin: 1.5,\r\n  },\r\n  txtYellow: {\r\n    height: 65,\r\n    width: 65,\r\n    fontSize: 55,\r\n    backgroundColor: \"#F6D860\",\r\n    // borderWidth: 0.9,\r\n    // alignItems: \"center\",\r\n    // justifyContent: \"center\",\r\n    // alignContent: \"center\",\r\n    textAlign: \"center\",\r\n    fontWeight: \"bold\",\r\n    color: \"white\",\r\n    textAlignVertical: \"center\",\r\n    margin: 1.5,\r\n  },\r\n});\r\n\r\nexport default Row;\r\n"]},"metadata":{},"sourceType":"module"}